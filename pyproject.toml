requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agicommander"
version = "0.1.0"
description = "An AI-powered autonomous development assistant for project-level code understanding and modification"
readme = "README.md"
license = {text = "Dual License - See LICENSE file"}
authors = [
    {name = "Cal Page", email = "cal.page@example.com"},
]
maintainers = [
    {name = "Cal Page", email = "cal.page@example.com"},
]
keywords = [
    "ai", "artificial-intelligence", "agi", "code-generation",
    "development-tools", "automation", "mcp", "llm", "gemini"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    # Core LLM Integration
    "langchain-google-genai>=2.0.0",
    "langchain>=0.1.0",

    # Configuration and Environment
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",

    # Vector Database and Memory
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",

    # Web and API
    "requests>=2.31.0",
    "aiohttp>=3.8.0",
    "httpx>=0.24.0",

    # Data Processing
    "pandas>=2.0.0",
    "numpy>=1.24.0",

    # Async Support
    "asyncio",

    # Logging
    "structlog>=23.0.0",

    # AWS S3 Integration
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    "mcp>=1.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
]

# Additional LLM providers
llm-extended = [
    "openai>=1.0.0",
    "anthropic>=0.7.0",
]

# Research and web search capabilities
research = [
    "tavily-python>=0.3.0",
    "beautifulsoup4>=4.12.0",
    "newspaper3k>=0.2.8",
    "aiohttp>=3.8.0",
    "requests>=2.31.0",
]

# Database backends
databases = [
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "redis>=4.5.0",
]

# Machine learning and advanced AI
ml = [
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "huggingface-hub>=0.16.0",
    "scikit-learn>=1.3.0",
]

# Monitoring and observability
monitoring = [
    "prometheus-client>=0.16.0",
    "sentry-sdk>=1.30.0",
    "structlog>=23.0.0",
]

# Web interface and API
web = [
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "jinja2>=3.1.0",
    "websockets>=11.0.0",
]

# Document processing
documents = [
    "pypdf>=3.0.0",
    "python-docx>=0.8.11",
    "openpyxl>=3.1.0",
    "mammoth>=1.6.0",
]

# Vector database and embeddings
vector-db = [
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",
    "torch>=2.0.0",  # For GPU acceleration
    "transformers>=4.30.0",
]

# AWS and cloud storage services
aws = [
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    "awscli>=1.32.0",
]

# All optional dependencies
all = [
    "agicommander[dev,llm-extended,research,databases,ml,monitoring,web,documents,vector-db,aws]"
]

[project.urls]
"Homepage" = "https://github.com/yourusername/agicommander"
"Bug Reports" = "https://github.com/yourusername/agicommander/issues"
"Source" = "https://github.com/yourusername/agicommander"
"Documentation" = "https://github.com/yourusername/agicommander/docs"

[project.scripts]
agicommander = "core.orchestrator:main"
agi-setup = "scripts.setup:main"
agi-test = "scripts.test:main"
# S3 MCP Server
s3-mcp-server = "servers.memory.S3.s3_mcp_server:main"
# Vector Database MCP Server
vector-db-mcp-server = "servers.memory.vector_db.vector_db_mcp_server:main"

[project.entry-points."agicommander.plugins"]
# Plugin entry points for extensibility
code_server = "servers.code.commander:create_server"
memory_server = "servers.memory.vector_db:create_server"
research_server = "servers.learning.research:create_server"
# S3 Memory Server
s3_server = "servers.memory.S3.s3_mcp_server:S3MCPServer"
# Vector Database Memory Server
vector_db_server = "servers.memory.vector_db.vector_db_mcp_server:VectorDBMCPServer"
# Research Learning Server
research_server = "servers.learning.research:ResearchMCPServer"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "llm_adapters*", "servers*", "agents*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.md", "*.txt"]

# =============================================================================
# DEVELOPMENT TOOLS CONFIGURATION
# =============================================================================

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | memory
  | workspace
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["core", "llm_adapters", "servers", "agents"]
known_third_party = ["langchain", "chromadb", "pandas", "numpy", "yaml"]

[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203",  # whitespace before ':' (conflicts with black)
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    "memory",
    "workspace"
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "chromadb.*",
    "sentence_transformers.*",
    "mcp.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=core",
    "--cov=llm_adapters",
    "--cov=servers",
    "--cov=agents",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ai: marks tests that require AI API access",
    "experimental: marks tests for experimental features",
]

[tool.coverage.run]
source = ["core", "llm_adapters", "servers", "agents"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/examples/*",
    "*/workspace/*",
    "*/memory/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# =============================================================================
# DOCUMENTATION CONFIGURATION
# =============================================================================

[tool.sphinx]
source-dir = "docs"
build-dir = "docs/_build"

# =============================================================================
# SECURITY SCANNING
# =============================================================================

[tool.bandit]
exclude_dirs = ["tests", "memory", "workspace"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for dev tools

[tool.safety]
# Safety configuration for dependency scanning
full_report = true

# =============================================================================
# PRE-COMMIT HOOKS
# =============================================================================

[tool.pre-commit]
# Configuration for pre-commit hooks
repos = [
    {
        repo = "https://github.com/psf/black",
        rev = "23.1.0",
        hooks = [{id = "black"}]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [{id = "isort"}]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [{id = "flake8"}]
    },
    {
        repo = "https://github.com/pre-commit/mypy",
        rev = "v1.0.0",
        hooks = [{id = "mypy"}]
    }
]

# =============================================================================
# PACKAGING AND DISTRIBUTION
# =============================================================================

[tool.setuptools_scm]
write_to = "core/_version.py"
version_scheme = "post-release"
local_scheme = "dirty-tag"

[tool.wheel]
universal = false

# =============================================================================
# ENVIRONMENT SPECIFIC CONFIGURATIONS
# =============================================================================

[tool.agicommander]
# AGIcommander specific configuration
default_config = "config/default.yaml"
log_level = "INFO"
safety_mode = true

[tool.agicommander.development]
# Development specific settings
mock_external_apis = true
verbose_logging = true
save_intermediate_results = true

[tool.agicommander.production]
# Production specific settings
safety_mode = true
enable_monitoring = true
log_level = "WARNING"

